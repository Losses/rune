name: Build 

on:
  workflow_dispatch:
  push:
    tags:
      - v*

jobs:
  build-windows:
    runs-on: windows-latest
    env: 
        VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@v2
      
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "26.x"
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install the Rust dependencies
        run: cargo install 'flutter_rust_bridge_codegen' rinf protoc-gen-prost
        
      - name: Activate Protobuf
        run: flutter pub global activate protoc_plugin

      - name: Flutter pub get
        run: flutter pub get

      - name: Generate message files
        run: rinf message 

      - name: Build Windows
        run: flutter build windows --release --verbose
      
      - uses: benjlevesque/short-sha@v3.0
        id: short-sha
        with:
          length: 7
    
      - name: Upload artifact 
        uses: actions/upload-artifact@v4
        with:
          path: build/windows/x64/runner/Release/
          name: Rune-${{ github.ref_name }}-${{ steps.short-sha.outputs.sha }}-windows

  release-windows:
    permissions:
      contents: write
    needs: build-windows
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          pattern: Rune-*-windows
          path: artifacts
          
      - uses: benjlevesque/short-sha@v3.0
        id: short-sha
        with:
          length: 7
          
      - name: Build Zip for Release
        uses: thedoctor0/zip-release@master
        with:
          type: "zip"
          filename: Rune-${{ github.ref_name }}-${{ steps.short-sha.outputs.sha }}-windows-amd64.zip
          directory: artifacts
      
      - name: Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "artifacts/*.zip"
          allowUpdates: true
          replacesArtifacts: false
          omitBodyDuringUpdate: true
          makeLatest: true

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y liblmdb0 jq alsa-base alsa-source librust-alsa-sys-dev libasound2-dev liblmdb-dev clang cmake ninja-build pkg-config libgtk-3-dev dpkg-dev libayatana-appindicator3-dev libnotify-dev

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@v2
      
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "26.x"
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install the Rust dependencies
        run: cargo install 'flutter_rust_bridge_codegen' rinf protoc-gen-prost
        
      - name: Activate Protobuf
        run: flutter pub global activate protoc_plugin

      - name: Flutter pub get
        run: flutter pub get

      - name: Generate message files
        run: rinf message 

      - name: Build linux
        run: flutter build linux --release --verbose

      - uses: benjlevesque/short-sha@v3.0
        id: short-sha
        with:
          length: 7
      
      - name: Upload artifact 
        uses: actions/upload-artifact@v4
        with:
          path: build/linux/x64/release/bundle/
          name: Rune-${{ github.ref_name }}-${{ steps.short-sha.outputs.sha }}-linux

  build-steam-sniper:
    runs-on: ubuntu-latest
    container: registry.gitlab.steamos.cloud/steamrt/sniper/sdk:beta
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y liblmdb0 jq librust-alsa-sys-dev libasound2-dev liblmdb-dev clang cmake ninja-build pkg-config libgtk-3-dev dpkg-dev libayatana-appindicator3-dev libnotify-dev

      - name: Patch Environment
        run: |
          # https://github.com/actions/runner/issues/2033
          chown -R $(id -u):$(id -g) $PWD
          git config --global --add safe.directory '*'
       
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@v2
      
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "26.x"
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install the Rust dependencies
        run: cargo install 'flutter_rust_bridge_codegen' rinf protoc-gen-prost
        
      - name: Activate Protobuf
        run: flutter pub global activate protoc_plugin

      - name: Flutter pub get
        run: flutter pub get

      - name: Generate message files
        run: rinf message 

      - name: Build linux
        run: flutter build linux --release --verbose

      - uses: benjlevesque/short-sha@v3.0
        id: short-sha
        with:
          length: 7
      
      - name: Copy Steam Launch Scripts
        run: |
          chmod +x scripts/steam/*
          cp -r scripts/steam/* build/linux/x64/release/bundle/


      - name: Upload artifact 
        uses: actions/upload-artifact@v4
        with:
          path: build/linux/x64/release/bundle/
          name: Rune-${{ github.ref_name }}-${{ steps.short-sha.outputs.sha }}-steam-sniper

  release-linux:
    permissions:
      contents: write
    needs: build-linux
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          pattern: Rune-*-linux
          path: artifacts

      - uses: benjlevesque/short-sha@v3.0
        id: short-sha
        with:
          length: 7
          
      - name: Build Zip for Release
        uses: thedoctor0/zip-release@master
        with:
          type: "zip"
          filename: Rune-${{ github.ref_name }}-${{ steps.short-sha.outputs.sha }}-linux-amd64.zip
          directory: artifacts
          
      - name: Release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: "artifacts/*.zip"
          replacesArtifacts: false
          omitBodyDuringUpdate: true
          makeLatest: true

  release-steam-sniper:
    permissions:
      contents: write
    needs: build-steam-sniper
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          pattern: Rune-*-steam-sniper
          path: artifacts

      - uses: benjlevesque/short-sha@v3.0
        id: short-sha
        with:
          length: 7
          
      - name: Build Zip for Release
        uses: thedoctor0/zip-release@master
        with:
          type: "zip"
          filename: Rune-${{ github.ref_name }}-${{ steps.short-sha.outputs.sha }}-steam-sniper-amd64.zip
          directory: artifacts
          
      - name: Release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: "artifacts/*.zip"
          replacesArtifacts: false
          omitBodyDuringUpdate: true
          makeLatest: true
    
  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true
          
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        
      - uses: Swatinem/rust-cache@v2
      
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "26.x"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
        
      - uses: benjlevesque/short-sha@v3.0
        id: short-sha
        with:
          length: 7

      - name: Install certificates
        env:
          DEVELOPER_ID_APPLICATION_P12_BASE64_MAC: ${{ secrets.DEVELOPER_ID_APPLICATION_P12_BASE64_MAC }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH=$RUNNER_TEMP/build_developerID_application_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/rune-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$DEVELOPER_ID_APPLICATION_P12_BASE64_MAC" | base64 --decode --output $DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # security default-keychain -s $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

      - name: All 
        run: |
          brew install just
          just macos-ci-all
        env:
          DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY: ${{ secrets.DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          REF_NAME: ${{ github.ref_name }}
          SHA: ${{ steps.short-sha.outputs.sha }}

      - name: Replace System Dylib
        run: |
          otool -L Rune.app/Contents/MacOS/Rune | grep lmdb
          install_name_tool -change /opt/homebrew/opt/lmdb/lib/liblmdb.dylib @executable_path/../Frameworks/liblmdb.dylib Rune.app/Contents/MacOS/Rune
        working-directory: build/macos/Build/Products/Release
          
      - name: Upload artifact macOS DMG
        uses: actions/upload-artifact@v4
        with:
          path: "temp_macos/*.dmg"
          name: Rune-${{ github.ref_name }}-${{ steps.short-sha.outputs.sha }}-macOS

      - name: Clean up
        if: ${{ always() }}
        run: |
          just macos-ci-clean
          if [ -f "$RUNNER_TEMP/rune-signing.keychain-db" ]; then
            echo "$RUNNER_TEMP/rune-signing.keychain-db"
            security delete-keychain $RUNNER_TEMP/rune-signing.keychain-db
          fi
          rm -f .env

  release-macos:
    permissions:
      contents: write
    needs: build-macos
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          pattern: Rune-*-macOS
          path: artifacts
          
      - name: Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "artifacts/**/*.dmg"
          allowUpdates: true
          replacesArtifacts: false
          omitBodyDuringUpdate: true
          makeLatest: true
