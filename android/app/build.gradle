plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

android {
    namespace = "ci.not.rune"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = "27.1.12297006"

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "ci.not.rune"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig = signingConfigs.debug
        }
    }

    // below are the configurations for Rust and libc++_shared.so
    // in short, we copy the libc++_shared.so from NDK to JniLibs and clean it after assembling
    afterEvaluate {
        def ndkDir = android.ndkDirectory
        def prebuiltDir = new File("$ndkDir/toolchains/llvm/prebuilt")
        def platformFolder = prebuiltDir.listFiles().find { it.isDirectory() }?.name
        if (platformFolder == null) {
            throw new Exception("Unable to find prebuilt folder in NDK directory: $prebuiltDir")
        }
        def libCppDir = "$ndkDir/toolchains/llvm/prebuilt/$platformFolder/sysroot/usr/lib"
        def jniLibsDir = "$projectDir/src/main/jniLibs"
        // newer NDK versions put the abi in clang target arch folders, thus we need to map the abi to the target arch
        def abis = ["armeabi-v7a", "arm64-v8a", "x86", "x86_64"]
        def abiToTargetMap = [
            "arm64-v8a": "aarch64-linux-android",
            "armeabi-v7a": "arm-linux-androideabi",
            "x86": "i686-linux-android",
            "x86_64": "x86_64-linux-android"
        ]

        // clean JniLibs before and after merge, ensuring that the libc++_shared.so is always up-to-date.
        task cleanJniLibs {
            doLast {
                abis.each { abi ->
                    def libcSoDest = file("$jniLibsDir/$abi/libc++_shared.so")
                    if (libcSoDest.exists()) {
                        println "Deleting $libcSoDest"
                        libcSoDest.delete()
                    }
                }
            }
        }

        // copy libc++_shared.so to JniLibs
        task copyLibcxxShared {
            doLast {
                println "Now let's make libhub.so happy ;)"
                abis.each { abi ->
                    def libcSoSrc = file("$libCppDir/${abiToTargetMap[abi]}/libc++_shared.so")
                    def libcSoDest = file("$jniLibsDir/$abi/libc++_shared.so")
                    if (libcSoSrc.exists()) {
                        println "Copying $libcSoSrc to $libcSoDest"
                        copy {
                            from libcSoSrc
                            into "$jniLibsDir/$abi"
                        }
                    } else {
                        throw new Exception("libc++_shared.so for ABI $abi not found in NDK at $libCppDir.")
                    }
                }
            }
        }

        // when merging JniLibs, first clean then copy
        tasks.matching { 
            it.name.startsWith('merge') && it.name.contains('JniLib')
        }.all { task ->
            task.dependsOn cleanJniLibs
            task.dependsOn copyLibcxxShared
        }

        // after assembling, clean JniLibs
        tasks.matching { 
            it.name.startsWith('assemble') || it.name.contains('build')
        }.all { task ->
            // avoid using task.finalizedBy(cleanJniLibs) because it will cause circular dependency
            task.doLast {
                println "Cleaning JniLibs after $task.name"
                cleanJniLibs.actions.each {
                    it.execute(task)
                }
            }
        }
    }
}

flutter {
    source = "../.."
}
